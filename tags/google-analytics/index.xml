<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>google-analytics on Mark Edmondson</title>
    <link>https://code.markedmondson.me/tags/google-analytics/</link>
    <description>Recent content in google-analytics on Mark Edmondson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 04 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://code.markedmondson.me/tags/google-analytics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Activating GA4 events with GTM Server-Side and Pub/Sub for Fun and Profit</title>
      <link>https://code.markedmondson.me/sending-ga4-events-pubsub/</link>
      <pubDate>Tue, 04 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://code.markedmondson.me/sending-ga4-events-pubsub/</guid>
      <description>&lt;p&gt;&lt;em&gt;Image from &lt;a href=&#34;https://solarsystem.nasa.gov/resources/758/brief-outburst/?category=solar-system_sun&#34;&gt;https://solarsystem.nasa.gov/resources/758/brief-outburst/?category=solar-system_sun&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With Google Tag Manager Server-side (GTM-SS), the scope on what you can do with your GA4 events is much enhanced, since using GTM-SS you have the ability to interact easily with other GCP services, in particular easier Google authentication.  This integration can allow you to enrich your data streams or send your GA4 data to different locations other than the Google Marketing Platform.  The first example of this has been using the BigQuery API in your GTM-SS templates to export your event data, but what if you need your event data on a more real-time basis?  For that, there is &lt;a href=&#34;https://cloud.google.com/pubsub/docs/overview&#34;&gt;Google Pub/Sub&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gago: Blazingly fast Google Analytics API downloads with Go</title>
      <link>https://code.markedmondson.me/gago/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://code.markedmondson.me/gago/</guid>
      <description>gago is a new Go library for working with the Google Analytics Reporting API v4.
I used it as a way to learn Go, transferring across some of the lessons I learned from working with the Google Analytics API in googleAnalyticsR. In particular how to get fast downloads and adding an anti-sample option, whilst taking advantage of Go&amp;rsquo;s natural multi-threaded nature.
The imagined use case is for when you need to download Google Analytics data but you don&amp;rsquo;t want to install an interpreted language such as Python or R to do so.</description>
    </item>
    
    <item>
      <title>Auto Google Analytics Data Imports from Cloud Storage</title>
      <link>https://code.markedmondson.me/automatic-google-analytics-data-imports-cloud-storage/</link>
      <pubDate>Thu, 29 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://code.markedmondson.me/automatic-google-analytics-data-imports-cloud-storage/</guid>
      <description>Continuing my infatuation with cloud functions (see last post on using cloud functions to manipulate BigQuery exports) this is a post showing how to bring together various code examples out there so that you can easily upload custom data imports from a Google cloud storage bucket.
The code is available in this GitHub repo for useful cloud functions with Google Analytics
Extended data imports Google Analytics offers various versions of uploads.</description>
    </item>
    
    <item>
      <title>Insights sorting by delta metrics in the Google Analytics API v4</title>
      <link>https://code.markedmondson.me/quicker-insight-sort-metric-delta/</link>
      <pubDate>Thu, 01 Dec 2016 23:03:57 +0100</pubDate>
      
      <guid>https://code.markedmondson.me/quicker-insight-sort-metric-delta/</guid>
      <description>As analysts, we are often called upon to see how website metrics have improved or declined over time. This is easy enough when looking at trends, but if you are looking to break down over other dimensions, it can involve a lot of ETL to get to what you need.
For instance, if you are looking at landing page performance of SEO traffic you can sort by the top performers, but not by the top most improved performers.</description>
    </item>
    
    <item>
      <title>Efficient anti-sampling with the Google Analytics Reporting API</title>
      <link>https://code.markedmondson.me/anti-sampling-google-analytics-api/</link>
      <pubDate>Fri, 05 Aug 2016 23:03:57 +0100</pubDate>
      
      <guid>https://code.markedmondson.me/anti-sampling-google-analytics-api/</guid>
      <description>Avoiding sampling is one of the most common reasons people start using the Google Analytics API. This blog lays out some pseudo-code to do so in an efficient manner, avoiding too many unnecessary API calls. The approach is used in the v4 calls for the R package googleAnalyticsR.
Avoiding the daily walk The most common approach to mitigate sampling is to break down the API calls into one call per day.</description>
    </item>
    
    <item>
      <title>SEO keyword research using searchConsoleR and googleAnalyticsR</title>
      <link>https://code.markedmondson.me/search-console-google-analytics-r-keyword-research/</link>
      <pubDate>Tue, 21 Jun 2016 23:03:57 +0100</pubDate>
      
      <guid>https://code.markedmondson.me/search-console-google-analytics-r-keyword-research/</guid>
      <description>In this blog we look at a method to estimate where to prioritise your SEO resources, estimating which keywords will give the greatest increase in revenue if you could improve their Google rank.
Overview Thanks to Vincent at data-seo.com who proof read and corrected some errors in the first draft
Data comes from Google Search Console and Google Analytics.
Search Console is used to provide the keywords in these days post (not provided).</description>
    </item>
    
  </channel>
</rss>
