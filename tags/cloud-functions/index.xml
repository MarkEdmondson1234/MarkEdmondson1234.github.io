<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cloud Functions on Mark Edmondson</title>
    <link>https://code.markedmondson.me/tags/cloud-functions/</link>
    <description>Recent content in Cloud Functions on Mark Edmondson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 09 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://code.markedmondson.me/tags/cloud-functions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Turning GA360 BigQuery exports into partitioned tables using Cloud Functions</title>
      <link>https://code.markedmondson.me/bigquery-ga360-exports-cloud-functions/</link>
      <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://code.markedmondson.me/bigquery-ga360-exports-cloud-functions/</guid>
      <description>Its been a while since my last blog, although I had a good excuse as I’ve moved house into the Copenhagen suburbs, Brønshøj. But in the meantime, I have had the chance to find my new favourite tool for data engineering - Google Cloud Functions in Python.
This post will look at how to use them to work with the GA360 BigQuery export tables.
Google Cloud Functions Cloud Functions are the highest level of abstraction on the serverless stack of the GCP, and offer you a way to just upload code, and then let Google take care of all the dev-ops underneath for serving the results of your function.</description>
    </item>
    
  </channel>
</rss>